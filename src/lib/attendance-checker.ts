import { db } from "@/lib/firebase";
import { collection, query, where, getDocs, addDoc, serverTimestamp } from "firebase/firestore";
import { format } from "date-fns";
import { id } from "date-fns/locale";
// Function to check and mark Alpha status
export async function checkAndMarkAlpha(schoolId: string) {
 try {
   const today = format(new Date(), "yyyy-MM-dd");
   const now = new Date();
   const currentHour = now.getHours();

   // Check only after morning attendance time (e.g., after 9:00 AM) and after afternoon attendance time (e.g., after 4:00 PM)
   const isMorningCheckTime = currentHour >= 9; // After 9:00 AM
   const isAfternoonCheckTime = currentHour >= 16; // After 4:00 PM

   if (!isMorningCheckTime && !isAfternoonCheckTime) {
     return;
   }

   // Get all teachers
   const teachersQuery = query(collection(db, "users"), where("role", "==", "teacher"), where("schoolId", "==", schoolId));
   const teachersSnapshot = await getDocs(teachersQuery);

   // For each teacher
   teachersSnapshot.forEach(async (teacherDoc) => {
     const teacher = teacherDoc.data();

     // Check if teacher has attendance for today
     const attendanceRef = collection(db, `schools/${schoolId}/teacher-attendance`);

     let attendanceQuery;
     if (isMorningCheckTime) {
       // Morning attendance check (entry time)
       attendanceQuery = query(
         attendanceRef,
         where("teacherId", "==", teacherDoc.id),
         where("date", "==", today),
         where("attendanceType", "==", "entry")
       );
     } else {
       // Afternoon attendance check (exit time)
       attendanceQuery = query(
         attendanceRef,
         where("teacherId", "==", teacherDoc.id),
         where("date", "==", today),
         where("attendanceType", "==", "exit")
       );
     }

     const attendanceSnapshot = await getDocs(attendanceQuery);

     // If no attendance record found, mark as Alpha
     if (attendanceSnapshot.empty) {
       // Create Alpha record
       const attendanceData = {
         teacherId: teacherDoc.id,
         teacherName: teacher.name || teacher.displayName || "Unknown Teacher",
         email: teacher.email,
         status: 'alpha',
         reason: 'Tidak melakukan absensi',
         date: today,
         time: format(now, "HH:mm:ss"),
         day: format(now, "EEEE", { locale: id }),
         timestamp: serverTimestamp(),
         month: format(now, "MM-yyyy"),
         attendanceType: isMorningCheckTime ? "entry" : "exit",
         autoGenerated: true
       };

       // Save to Firestore
       await addDoc(collection(db, `schools/${schoolId}/teacher-attendance`), attendanceData);

       // Send notification
       await sendAlphaNotification(schoolId, attendanceData);
     }
   });
 } catch (error) {
   console.error("Error checking and marking Alpha status:", error);
 }
}
// Send notification for Alpha status
async function sendAlphaNotification(schoolId: string, attendanceData: any) {
 try {
   const message = `PERINGATAN : Guru dengan nama ${attendanceData.teacherName} tidak melakukan absensi ${
     attendanceData.attendanceType === "entry" ? "MASUK" : "PULANG"
   } pada hari ini ${format(new Date(), "d MMMM yyyy", { locale: id })} WIB.`;

   // Send notification
   const BOT_TOKEN = "7662377324:AAEFhwY-y1q3IrX4OEJAUG8VLa8DqNndH6E";

   // Get admin telegram ID
   const adminQuery = query(collection(db, "users"), where("role", "==", "admin"), where("schoolId", "==", schoolId));
   const adminSnapshot = await getDocs(adminQuery);

   if (!adminSnapshot.empty) {
     // Send to all admins
     adminSnapshot.forEach(async (adminDoc) => {
       const admin = adminDoc.data();
       if (admin.telegramNumber) {
         await fetch(`https://api.telegram.org/bot${BOT_TOKEN}/sendMessage`, {
           method: 'POST',
           headers: {
             'Content-Type': 'application/json'
           },
           body: JSON.stringify({
             chat_id: admin.telegramNumber,
             text: message
           })
         });
       }
     });
   }
 } catch (error) {
   console.error("Error sending Alpha notification:", error);
 }
}
